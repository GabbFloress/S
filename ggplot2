install.packages("ggplot2")

require(ggplot2)

set.seed(1410) # Make the sample reproducible

dsmall <- diamonds[sample(nrow(diamonds), 100), ]

#qplot(x, y, data= ) 

qplot(carat, price, data = diamonds)

# La gráfica muestra una correlación extraña porque qplot acepta 
# funciones como argumentos, para evitar esto se agrega log()

# qplot (log(x) , log(y), data = )

qplot(log(carat), log(price), data = diamonds)


#Se muestra una correlación que se aproxima a una lineal

# También se puede poner como argumento la combinación de variables
# en este caso el argumento "y" es ahora el volumen que se obtiene con: x*y*z

qplot(carat, x * y * z, data = diamonds)

# qplot(x, y, data = basededatos, colour = variabledelabase) 

# colour asigna automáticamente un color a cada dato de la variable asignada 

qplot(carat, price, data = dsmall, colour = color)

# shape asigna automáticamente una forma a cada dato de la variable asignada 

qplot(carat, price, data = dsmall, shape = cut)

# con I() se puede modificar el color o forma 
# colour = I("red") ó size = I(2)

# cuando los puntos se sobreponen se puede utilizar alpha =
# para modificar la transparencia de los puntos
# alpha = valores de 0 a 1, donde 0 es transparente y 1 opaco

qplot(carat, price, data = diamonds, alpha = I(1/10))

qplot(carat, price, data = diamonds, alpha = I(1/100))

qplot(carat, price, data = diamonds, alpha = I(1/200))

qplot(carat, price, data = dsmall, colour = color, alpha = .6)

# qplot(carat, price, data = dsmall) original

qplot(carat, price, data = dsmall, geom = c("point", "smooth"))

# geom agrega una linea de tendencia con un intervalo de confianza
# el primer argumento es el tipo de gráfica 

qplot(carat, price, data = dsmall, geom = c("point", "smooth"), se = FALSE)

# se = FALSE elimina el intervalo de confianza en la gráfica

# qplot(carat, price, data = diamonds) original

qplot(carat, price, data = diamonds, geom = c("point", "smooth"))

# el argumento span hace una regresión, con valores cercanos a 1 la linea 
# de tendencia es más suave

qplot(carat, price, data = dsmall, geom = c("point", "smooth"), span = 0.2) 

qplot(carat, price, data = dsmall, geom = c("point", "smooth"), span = 1)

install.packages("mgcv")

require(mgcv)

# Para el modelo aditivo method = "gam", formula = y ∼ s(x)

qplot(carat, price, data = dsmall, geom = c("point", "smooth"),
      method = "gam", formula = y ~ s(x))

# formula = y ~ s(x, bs = "cs") se usa para bases con más de mil datos

qplot(carat, price, data = dsmall, geom = c("point", "smooth"),
      method = "gam", formula = y ~ s(x, bs = "cs"))


# Para un modelo lineal method = "lm"
# formula = y ~ poly(x, 2) ajustará a un polinomio de segundo grado
# o bajar la paquetería splines para usar formula = y ~ ns(x, 2) 
# el segundo parámetro indica los grados de libertad

install.packages("splines")

require(splines)

qplot(carat, price, data = dsmall, geom = c("point", "smooth"),
      method = "lm")

qplot(carat, price, data = dsmall, geom = c("point", "smooth"),
      method = "lm", formula = y ~ ns(x,5)) #5 grados de libertad

install.packages("MASS")

require(MASS)

qplot(carat, price, data = dsmall, geom = c("point", "smooth"),
      method = "rlm") 

# no toma en cuenta los puntos que se alejan mucho 
# del comportamiento de los datos.

# cuando se tiene una variable categórica y se desea saber cómo se 
# comportan las otras variables según el valor de ésta

qplot(carat, price, data = dsmall, geom = c("point", "smooth"),
      method = "gam", formula = y ~ x)

qplot(carat, price, data = dsmall, geom = c("point", "smooth"),
      method = "lm", formula = y ~ ns(x,5)) 


qplot(color, price/carat, data = diamonds, geom = "jitter") #muestra cada punto 

qplot(color, price/carat, data = diamonds, geom = c("point", "boxplot")) 


qplot(color, price / carat, data = diamonds, geom = "jitter", alpha = I(1 / 5))
qplot(color, price / carat, data = diamonds, geom = "jitter", alpha = I(1 / 50))
qplot(color, price / carat, data = diamonds, geom = "jitter", alpha = I(1 / 200))

#Histograma y densidad para una variable

qplot(carat, data = diamonds, geom = "histogram")

qplot(carat, data = diamonds, geom = "density")

# binwidth valores cercanos a 1 hacen menos intervalos, valores cercanos a 0 más intervalos
# xlim c(0,3) indica los valores del eje x

qplot(carat, data = diamonds, geom = "histogram", binwidth = 1, xlim = c(0,3))
qplot(carat, data = diamonds, geom = "histogram", binwidth = 0.1, xlim = c(0,3))
qplot(carat, data = diamonds, geom = "histogram", binwidth = 0.01, xlim = c(0,3))

# fill = subgrupo que se desea observar

qplot(carat, data = diamonds, geom = "histogram", fill = color)

# colour = subgrupo, sirve para comparar varias curvas

qplot(carat, data = diamonds, geom = "density", colour = color)

# Gráfica de barras

qplot(color, data = diamonds, geom = "bar") #realiza la tabulación de los datos

qplot(color, data = diamonds, geom = "bar", weight = carat) + #weight = datos ponderados por variable
  scale_y_continuous("carat")  # cambia el nombre del eje y

# line grafica los puntos de la serie de tiempo de acuerdo al eje x (tiempo)
# path grafica los puntos de la serie de tiempo de acuerdo al orden en la serie

qplot(date, unemploy / pop, data = economics, geom = "line") #tasa de desempleo 

qplot(date, uempmed, data = economics, geom = "line") #semanas de desempleo

# comparar porcentaje desempleo con tiempo desempleado

year <- function(x) as.POSIXlt(x)$year + 1900

qplot(unemploy / pop, uempmed, data = economics, geom = c("point", "path"))

qplot(unemploy / pop, uempmed, data = economics, geom = "path", colour = year(date)) 

# con direrentes colores por año

#Facets
# row var ∼ col var fórmula general
# row var ∼ . creará una columna con varias filas

qplot(carat, data = diamonds, facets = color ~ .,
      geom = "histogram", binwidth = 0.1, xlim = c(0, 3)) 

# hace una gráfica por cada subgrupo de la variable utilizada en facets = variable ~ .

qplot(carat, ..density.., data = diamonds, facets = color ~ .,
      geom = "histogram", binwidth = 0.1, xlim = c(0, 3))

# ..density.. coloca automáticamente el nombre del eje y 


qplot(carat, price, data = dsmall, xlab = "Price ($)", ylab = "Weight (carats)",
      main = "Price-weight relationship")

qplot(carat, price/carat, data = dsmall, ylab = expression(frac(price,carat)),
  xlab = "Weight (carats)", main="Small diamonds", xlim = c(.2,1))

qplot(carat, price, data = dsmall, log = "xy") 
